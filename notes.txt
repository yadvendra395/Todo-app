IMPORTANT SELF NOTES :-

1. spring web and spring devtools dependencies are added by us while making the spring initializr... 
2. tomcat dependency is added in the pom.xml by us.....
3. self made the /META-INF/resources/WEB-INF/jsp/ directory
4. sayHello.jsp works by the help of prefix and suffix set in the application.properties by getting its file name returned by the method sayHelloJsp()...   => these are done by the "View Resolver" found in "Spring MVC"......
5. @ResponseBody is not given when the request mapping is made to the .jsp file.... //see SayHelloController
6. Remember: logging level is trace->debug->info->warn->error->off....
7. These are printed from controller method into the console when we refresh the browser....
8. spring-boot-starter-logging dependency is automatically added with starter-web dependency as it is the transitive dependency on it......
9. also remember that we are using SLF4j logging.....(also used that when abdul bari taught JDBC).......
10. .jsp files works as the "View" for "Spring MVC".....
11. Models are used to pass something, like parameter, to the jsp...
12. Request param is used to handle requests like - Http://localhost:8080/login?name=Ranga
13. by default method in form is "get" and we need to change it to "post" as "get" is not secure and shows the password in the url....
14. after submiiting we move to post method which needed not to be handled by the login controller, thats why RequestMethod is added into it.....

**15. Name of parameter in the @RequestParam for the fields of form should be same as the name of that field given in the "name" attribute in the form made in login.jsp.....

16. two dependencies are added for jstl in pom.xml
17. we need to give the version also for the static contents in the pom.xml like bootstrap css framework or jquery, etc.....

**18. We need to add (redirect:"mapping-name") as the returning string value for View to go to any previous page using any button, see e.g. submitting the add-todo details and returning back to the todo list.....

19. html form validation using "required" attribute is easy to create but is not recommended to use, as it can be easily overrided by any hacker, so it is suggested to use Spring Boot Validations technique only, see PDF page - 79..... 
new dependency for starter-validation needs to be added....

20. path attribute in form is used to give default value of the backing form object used for validation with Spring Boot and 2-way binding....
it stores the filled details in the model value(here todo) which can be used in the 2nd way of binding i.e. post request method of requestMapping..........
21. After setting the two-way binding in the TodoController, we can now use the SpringBoot Validation features using annotations like @Size,@Valid,etc.....
22. when using a jstl tag like <form:errors> we need to use cssClass instead of class to add the bootstrap css classes for styling......

23. update-todo and add-todo are using the same .jsp file i.e. todo.jsp
24. date format is added in application.properties
25. used .jspf files for common codes in different jsp files and imported them.....
26. added a dependency starter-security for spring security in pom.xml....
27. now we are fetching the username using spring security and not hardcoding it, also now not using the @SessionAttribute for username and using the finByUsername() method in both todoController and welcomeController...
this is done because user may directly open the todo list without going to the welcome page......
28. jpa and h2database dependency added manually in pom.xml
29. spring.datasource.url=jdbc:h2:mem:testdb added in application.properties as done in section 6 of course (learn-jpa-and-hibernate)............. (see point no. 41....)

**30. by default, the spring security protects all the urls of localhost:8080 e.g. login,todo-list,etc and the login form is shown for unauthorized requests and it is done by SecurityFilterChain internally...
now, to use h2console, we need to disable CSRF and html frames security.....
as h2console used html frames internally...

31. @GeneratedValue used along with @Id.......

**32.by default the .sql file is processed before the entities are processed, that's why the line "spring.jpa.defer-datasource-initialization=true" is added into application.properties...

33. "spring.jpa.show-sql=true" used to show sql statements running behind jpa/hibernate in application.properties whenever anything done on the todo-list at server.....

34. dependency for mysql is added in pom.xml

35. spring.database.url=jdbc:mysql://localhost:3306//todos
36. spring.database.username=todos-user
37. spring.database.password=dummytodos
38. spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect are added in application.properties for connecting to mysql....

39. spring.jpa.hibernate.ddl-auto=update is added into application.properties to automatically execute the sql commands internally by jpa/hibernate on using the todo on server.......

40. @GeneratedValue is used for generating the id in Todo.java, as we are not providing an id after the add-todo operation is done, so it is necessary....

41. spring.datasource.url=jdbc:h2:mem:testdb changed to spring.datasource.url=jdbc:mysql://localhost:3306/todos to connect to mysql instead of h2 database

42. data.sql is not useful as data is present in mysql...., it works only on in-memory database....
43. TodoController not needed anymore as TodoControllerJpa is handling everything.....
44. TodoService not needed anymore as TodoRepository is handling everything.....

45. http.csrf().disable(); and http.headers().frameOptions().disable(); is deprecated in SpringSecurityConfiguration but suppressed its warning and using it...

46. use \connect todos-user@localhost:3306
 then \use todos
 then \sql to connwct to mysql using mysql shell and use todos database

47. method="post" was used in the login.jsp in form tag when spring security was not implemented (also used in todo.jsp), it was used because if not used, the form filled details were shown on the url on submittins as localhost:8080/login?name=___&password=___, so method="post" was applied which helps in preventing this thing and some other benefits are also internally made.......

48. starter-validation dependency is added into pom.xml to used the spring validation methods like @Size used for the description, done using the 2-way binding process (command bean) seen already.... (also available on page-79 in pdf).....